/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
//apply plugin: 'java-library'

plugins {
   // id 'com.craigburke.karma' version '1.4.4'
   id "com.moowork.grunt" version "1.2.0"
   id "com.moowork.node" version "1.2.0"
    id 'java-library'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    // https://mvnrepository.com/artifact/org.primefaces/primefaces
compile group: 'org.primefaces', name: 'primefaces', version: '6.2'
    
}
/*
import org.apache.tools.ant.taskdefs.condition.Os
task karma(type: Exec) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', 'karma', 'start', '--single-run true'
  } else {
    commandLine 'karma', 'start', '--single-run true'
  }
}*/
task gruntTest(type: GruntTask) {
	dependsOn npmInstall
	dependsOn installGrunt
}

node {
	version = '8.11.3'
	//version = '6.12.0'
	npmVersion = '5.6.0'
	//npmVersion = '3.10.10'
	download = true
	
	// Set the work directory for unpacking node
	workDir = file("${rootProject.projectDir}/../nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${rootProject.projectDir}/../npm")

	  // Set the work directory where node_modules should be located
	  nodeModulesDir = file("${rootProject.projectDir}")
}
task checkNpmVersion(type: NpmTask, dependsOn: npmSetup, description: 'Executes karma tests in single run') {
	inputs.file "${project.gradle.gradleUserHomeDir}/gradle.settings"
	outputs.file "${project.gradle.gradleUserHomeDir}/../.npmrc"
	println "PATH: ${project.gradle.gradleUserHomeDir}"
	
	args = ['-v']
}
task getProxy(type:NpmTask, dependsOn: checkNpmVersion) {
	inputs.file "${project.gradle.gradleUserHomeDir}/gradle.settings"
	outputs.file "${project.gradle.gradleUserHomeDir}/../.npmrc"
	args =['config', 'get', 'http-proxy']
}
task getHTTPSProxy(type:NpmTask, dependsOn: getProxy) {
	inputs.file "${project.gradle.gradleUserHomeDir}/gradle.settings"
	outputs.file "${project.gradle.gradleUserHomeDir}/../.npmrc"
	args =['config', 'get', 'https-proxy']
	def testTask = project.tasks.findByName('npmInstall')
			if (testTask) {
				testTask.dependsOn getHTTPSProxy
		}
}
//test dany projekt! tzn. np karma-vm-webapp
task karma(description: 'Executes karma tests in single run') {
	/*if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		script = " npm config get prefix"
	} else {
		script = 
	} */
	def map = new HashMap<>();
	def jsonFile = project.file("${rootProject.projectDir}/karma.conf.properties")
	def parsedJson = new groovy.json.JsonSlurper().parseText(jsonFile.text)
	
	parsedJson.forEach { key, value -> if(!key.equals("description")) {
			// key => storyeditor
			def list = new ArrayList<>();
			map.put(key, list);
			value.forEach {key1, value2 -> if(!key1.equals("description")) {
					// key -> mock-files and test-files
					if(key1.equals("mock-files") || key1.equals("test-files")) {
						if(value2 != null && value2 instanceof List){
							list.addAll(value2)
						}
						
					}
				}
			}
			if(list.isEmpty()) {
				println key
				throw new IllegalArgumentException("You have badly specified karma.conf.properties for: " + key)
			}
		}
	}
	//def check= ""
	//map.get("storyeditor").each {
	//		check+="--file=" + it + " "
	//}
	println "MAP: "
	println map
	map.each{ key, value -> 
		key
		def check = ""
		value.each {
			check+="--file=" + it + " "
		}

		println "CHECK:"
		println check
		def karmaSubTask = task "karmaSubTask-${key}" (type: NodeTask, dependsOn: npmInstall, description: 'Executes karma tests in single run') {
			inputs.files("${rootProject.projectDir}/karma.conf.properties", "${rootProject.projectDir}/karma.conf.js")
			def karmaConfigPath = project.file("${rootProject.projectDir}/karma.conf.js").absolutePath
			script = project.file("${rootProject.projectDir}/node_modules/karma/bin/karma")
			args = ['start', karmaConfigPath, "$check", '--single-run', '--color']
			
		}
		def testTask = project.tasks.findByName('test')
			if (testTask) {
				testTask.dependsOn karmaSubTask
		}
	}
	
	def testTask = project.tasks.findByName('test')
    if (testTask) {
        testTask.dependsOn karma
    }	
}
	