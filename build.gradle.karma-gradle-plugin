/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
//apply plugin: 'java-library'

plugins {
   // id 'com.craigburke.karma' version '1.4.4'
    id 'java-library'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}
/*
import org.apache.tools.ant.taskdefs.condition.Os
task karma(type: Exec) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', 'karma', 'start', '--single-run true'
  } else {
    commandLine 'karma', 'start', '--single-run true'
  }
}*/


karma {
    basePath = '../' // <1>
    colors = true // <2>
    profile('default')  {
        libraryBases = ['']
        libraryFiles = ['jquery.js'] // <1>

        sourceBases = ['webapp/resources/']
        sourceFiles = ['**/*.js'] // <2>

        testBases = ['js-spec/']
        testFiles = ['**/*test.js'] // <3>
    }

    browsers = ['PhantomJS'] // <4>
    //browsers = ['PhantomJS', 'Chrome', 'ChromeHeadless'] // <4>
    frameworks = ['jasmine'] // <5>
     //reporters = ['junit'] // <6>
    reporters = ['junit', 'progress'] // <6>
    junitReporter = [outputDir: 'test-dir' ]
    concurency = 'Infinity'
	
	/*customLaunchers = [
     ChromeHeadless = [
        base:   'Chrome',
        flags:  [
          '--headless',
          '--disable-gpu',
          '--remote-debugging-port=9222',
        ],
      ]
	]
    */
	
	/*// Install packages from package.json
	task npm(type: Exec) {
		description = "Grab NodeJS dependencies (from package.json)"
		commandLine = ['npm', "install", 'puppeteer']
		outputs.dir "node_modules"

		//tasks.npmBin.execute()

	}
	
	karmaRun {
		dependsOn npm
	}*/
	logLevel= 'INFO'
}

clean.dependsOn karmaClean

